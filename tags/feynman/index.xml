<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Feynman on Blog DangnoHat</title><link>https://dang-nh-cen.github.io/dangcode-blog/tags/feynman/</link><description>Recent content in Feynman on Blog DangnoHat</description><generator>Hugo</generator><language>vi</language><lastBuildDate>Mon, 20 Oct 2025 09:00:00 +0700</lastBuildDate><atom:link href="https://dang-nh-cen.github.io/dangcode-blog/tags/feynman/index.xml" rel="self" type="application/rss+xml"/><item><title>Toán tử và biểu thức trong Java</title><link>https://dang-nh-cen.github.io/dangcode-blog/blog/java/03/12-java-operators/</link><pubDate>Mon, 20 Oct 2025 09:00:00 +0700</pubDate><guid>https://dang-nh-cen.github.io/dangcode-blog/blog/java/03/12-java-operators/</guid><description>&lt;div style="max-width: 950px; margin: 0 auto; padding: 0 10px;"&gt;
&lt;p style="font-size: 1.3em; line-height: 1.8; margin-bottom: 30px;"&gt;
 Toán tử (Operators) là **công cụ xử lý dữ liệu** cơ bản nhất trong lập trình. Chúng cho phép chúng ta thực hiện các phép tính, so sánh giá trị, và kết hợp các điều kiện. Mình học bằng cách giải thích theo Feynman: **“Toán tử = công cụ biến đổi dữ liệu”**. Bài viết này sẽ giúp bạn nắm vững các loại toán tử quan trọng nhất trong Java.
&lt;/p&gt;</description></item><item><title>Câu lệnh điều kiện if/else trong Java</title><link>https://dang-nh-cen.github.io/dangcode-blog/blog/java/04/13-java-ifelse/</link><pubDate>Mon, 20 Oct 2025 09:00:00 +0700</pubDate><guid>https://dang-nh-cen.github.io/dangcode-blog/blog/java/04/13-java-ifelse/</guid><description>&lt;div style="max-width: 950px; margin: 0 auto; padding: 0 10px;"&gt;
 &lt;p style="font-size: 1.3em; line-height: 1.8; margin-bottom: 30px;"&gt;
 Trong lập trình, **câu lệnh điều kiện** là công cụ giúp chương trình Java **ra quyết định** dựa trên các tình huống khác nhau. Đây là một trong những khái niệm cơ bản nhưng mạnh mẽ nhất. Mình học bằng phương pháp Feynman: **“Điều kiện = ngã rẽ đường”**. Bài viết này sẽ giúp bạn nắm vững câu lệnh `if/else` trong Java.
 &lt;/p&gt;</description></item><item><title>Vòng lặp trong Java: for, while, do-while</title><link>https://dang-nh-cen.github.io/dangcode-blog/blog/java/05/14-java-loops/</link><pubDate>Mon, 20 Oct 2025 09:00:00 +0700</pubDate><guid>https://dang-nh-cen.github.io/dangcode-blog/blog/java/05/14-java-loops/</guid><description>&lt;p&gt;Vòng lặp giúp &lt;strong&gt;làm việc lặp đi lặp lại&lt;/strong&gt; mà không viết lại code. Mình học bằng Feynman: “Vòng lặp = robot làm nhiệm vụ nhiều lần”.&lt;/p&gt;</description></item><item><title>Mảng và Collection trong Java</title><link>https://dang-nh-cen.github.io/dangcode-blog/blog/java/06/15-java-array-collection/</link><pubDate>Mon, 20 Oct 2025 09:00:00 +0700</pubDate><guid>https://dang-nh-cen.github.io/dangcode-blog/blog/java/06/15-java-array-collection/</guid><description>&lt;p&gt;Mảng và Collection giúp &lt;strong&gt;lưu trữ nhiều giá trị cùng lúc&lt;/strong&gt;. Mình học bằng Feynman: “Mảng = hộp nhiều ngăn, Collection = tủ đồ linh hoạt”.&lt;/p&gt;</description></item><item><title>Hàm, Overloading và Parameter Passing trong Java</title><link>https://dang-nh-cen.github.io/dangcode-blog/blog/java/07/16-java-functions/</link><pubDate>Mon, 20 Oct 2025 09:00:00 +0700</pubDate><guid>https://dang-nh-cen.github.io/dangcode-blog/blog/java/07/16-java-functions/</guid><description>&lt;p&gt;Hàm giúp &lt;strong&gt;tổ chức và tái sử dụng code&lt;/strong&gt;. Overloading và Parameter Passing làm code linh hoạt hơn.&lt;/p&gt;</description></item><item><title>Lập trình hướng đối tượng nâng cao: Class, Inheritance, Polymorphism</title><link>https://dang-nh-cen.github.io/dangcode-blog/blog/java/08/17-java-oop/</link><pubDate>Mon, 20 Oct 2025 09:00:00 +0700</pubDate><guid>https://dang-nh-cen.github.io/dangcode-blog/blog/java/08/17-java-oop/</guid><description>&lt;p&gt;Java là ngôn ngữ &lt;strong&gt;hướng đối tượng (OOP)&lt;/strong&gt;. Class, Inheritance, Polymorphism là nền tảng.&lt;br&gt;
Mình học bằng Feynman: “Class = bản thiết kế, Object = sản phẩm, Inheritance = thừa kế bản thiết kế, Polymorphism = nhiều hình thái sản phẩm”.&lt;/p&gt;</description></item><item><title>Exception Handling trong Java</title><link>https://dang-nh-cen.github.io/dangcode-blog/blog/java/09/18-java-exception/</link><pubDate>Mon, 20 Oct 2025 09:00:00 +0700</pubDate><guid>https://dang-nh-cen.github.io/dangcode-blog/blog/java/09/18-java-exception/</guid><description>&lt;p&gt;Exception giúp &lt;strong&gt;bắt lỗi và duy trì chương trình chạy ổn định&lt;/strong&gt;.&lt;/p&gt;</description></item><item><title>Java Input/Output (I/O)</title><link>https://dang-nh-cen.github.io/dangcode-blog/blog/java/10/19-java-io/</link><pubDate>Mon, 20 Oct 2025 09:00:00 +0700</pubDate><guid>https://dang-nh-cen.github.io/dangcode-blog/blog/java/10/19-java-io/</guid><description>&lt;p&gt;Java I/O giúp &lt;strong&gt;đọc/ghi dữ liệu từ file hoặc console&lt;/strong&gt;.&lt;/p&gt;</description></item></channel></rss>